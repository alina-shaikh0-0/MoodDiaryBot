from django.db import close_old_connections
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters
import os
import sys
sys.path.append(os.path.abspath('/diary_project'))  # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'diary_project.settings')
from django.core.wsgi import get_wsgi_application
application = get_wsgi_application()
import torch
from dotenv import load_dotenv
from diary_app.models import TelegramUser, MoodEntry
from transformers import pipeline, AutoTokenizer, AutoModelForSequenceClassification
from concurrent.futures import ThreadPoolExecutor
from asgiref.sync import sync_to_async
from threading import Thread

load_dotenv()


# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ø–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç BotFather)
TOKEN = 'telegram_token'

# –°–ø–∏—Å–æ–∫ –º–µ—Ç–æ–∫ —ç–º–æ—Ü–∏–π (27 —à—Ç—É–∫)
LABELS = [
    'admiration', 'amusement', 'anger', 'annoyance', 'approval', 'caring', 'confusion', 'curiosity', 'desire',
    'disappointment', 'disapproval', 'disgust', 'embarrassment', 'excitement', 'fear', 'gratitude', 'grief', 'joy',
    'love', 'nervousness', 'optimism', 'pride', 'realization', 'relief', 'remorse', 'sadness', 'surprise', 'neutral'
]

# –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–æ–º–µ—Ä–æ–≤ –∏ –º–µ—Ç–æ–∫
ID2LABEL = dict(enumerate(LABELS))

# –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–∞ —ç–º–æ—Ü–∏–π –≤ –ø—Ä–æ—Å—Ç—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —ç–º–æ–¥–∑–∏
EMOTION_MAP = {
    "admiration": {"category": "positive", "emoji": "üòÉ"},       # –í–æ—Å—Ö–∏—â–µ–Ω–∏–µ
    "amusement": {"category": "positive", "emoji": "üòÜ"},       # –í–µ—Å–µ–ª—å–µ
    "anger": {"category": "negative", "emoji": "ü§¨"},           # –ì–Ω–µ–≤
    "annoyance": {"category": "negative", "emoji": "üò°"},       # –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ
    "approval": {"category": "positive", "emoji": "üôÇ"},        # –û–¥–æ–±—Ä–µ–Ω–∏–µ
    "caring": {"category": "positive", "emoji": "üòå"},          # –ó–∞–±–æ—Ç–∞
    "confusion": {"category": "neutral", "emoji": "ü§î"},        # –ü—É—Ç–∞–Ω–∏—Ü–∞
    "curiosity": {"category": "neutral", "emoji": "ü§®"},        # –õ—é–±–æ–ø—ã—Ç—Å—Ç–≤–æ
    "desire": {"category": "positive", "emoji": "üòç"},          # –ñ–µ–ª–∞–Ω–∏–µ
    "disappointment": {"category": "negative", "emoji": "üòî"}, # –†–∞–∑–æ—á–∞—Ä–æ–≤–∞–Ω–∏–µ
    "disapproval": {"category": "negative", "emoji": "üôÑ"},    # –ù–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ
    "disgust": {"category": "negative", "emoji": "ü§¢"},        # –û—Ç–≤—Ä–∞—â–µ–Ω–∏–µ
    "embarrassment": {"category": "negative", "emoji": "ü§≠"},  # –°–º—É—â–µ–Ω–∏–µ
    "excitement": {"category": "positive", "emoji": "üòµ"},      # –í–æ–ª–Ω–µ–Ω–∏–µ
    "fear": {"category": "negative", "emoji": "üò±"},           # –°—Ç—Ä–∞—Ö
    "gratitude": {"category": "positive", "emoji": "üòá"},      # –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å
    "grief": {"category": "negative", "emoji": "üòø"},          # –ü–µ—á–∞–ª—å
    "joy": {"category": "positive", "emoji": "üòÉ"},            # –†–∞–¥–æ—Å—Ç—å
    "love": {"category": "positive", "emoji": "üòç"},           # –õ—é–±–æ–≤—å
    "nervousness": {"category": "negative", "emoji": "üò≥"},    # –ù–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å
    "optimism": {"category": "positive", "emoji": "üòå"},       # –û–ø—Ç–∏–º–∏–∑–º
    "pride": {"category": "positive", "emoji": "üòº"},          # –ì–æ—Ä–¥–æ—Å—Ç—å
    "realization": {"category": "neutral", "emoji": "ü§©"},     # –û–∑–∞—Ä–µ–Ω–∏–µ
    "relief": {"category": "positive", "emoji": "ü§∏"},         # –û–±–ª–µ–≥—á–µ–Ω–∏–µ
    "remorse": {"category": "negative", "emoji": "üò¢"},        # –†–∞—Å–∫–∞—è–Ω–∏–µ
    "sadness": {"category": "negative", "emoji": "üòî"},        # –ì—Ä—É—Å—Ç—å
    "surprise": {"category": "neutral", "emoji": "üò≤"},        # –£–¥–∏–≤–ª–µ–Ω–∏–µ
    "neutral": {"category": "neutral", "emoji": "üòê"}          # –ù–µ–π—Ç—Ä–∞–ª—å–Ω–∞—è —Ä–µ–∞–∫—Ü–∏—è
}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å –∏ —Ç–æ–∫–µ–Ω–∏–∑–∞—Ç–æ—Ä
tokenizer = AutoTokenizer.from_pretrained("fyaronskiy/ruRoberta-large-ru-go-emotions")
model = AutoModelForSequenceClassification.from_pretrained("fyaronskiy/ruRoberta-large-ru-go-emotions")

# –ü–æ—Ä–æ–≥–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–ª–æ–∂–∏–ª–∞ –º–æ–¥–µ–ª—å
best_thresholds = [
    0.36734693877551017, 0.2857142857142857, 0.2857142857142857, 0.16326530612244897, 0.14285714285714285,
    0.14285714285714285, 0.18367346938775508, 0.3469387755102041, 0.32653061224489793, 0.22448979591836732,
    0.2040816326530612, 0.2857142857142857, 0.18367346938775508, 0.2857142857142857, 0.24489795918367346,
    0.7142857142857142, 0.02040816326530612, 0.3061224489795918, 0.44897959183673464, 0.061224489795918366,
    0.18367346938775508, 0.04081632653061224, 0.08163265306122448, 0.1020408163265306, 0.22448979591836732,
    0.3877551020408163, 0.3469387755102041, 0.24489795918367346
]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user, created = TelegramUser.objects.get_or_create(chat_id=chat_id)
    if created:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω.")
    else:
        await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.")


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! " 
                                    "–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")

executor = ThreadPoolExecutor()


def _get_user_in_thread(chat_id):
    """
    –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∏—Å–ø–æ–ª–Ω—è–µ–º–∞—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    try:
        return TelegramUser.objects.get(chat_id=chat_id).user
    except TelegramUser.DoesNotExist:
        return None


"""def get_user_sync(chat_id):
    try:
        return TelegramUser.objects.get(chat_id=chat_id).user
    finally:
        executor.shutdown(wait=True)"""


async def get_user_sync(chat_id):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ, –≤—ã–ø–æ–ª–Ω—è—è –æ–ø–µ—Ä–∞—Ü–∏—é –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ.
    """
    return await _get_user_in_thread(chat_id)


async def analyze_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    print(f"Processing text: {text}")
    inputs = tokenizer(text, truncation=True, add_special_tokens=True, max_length=128, return_tensors='pt')
    with torch.no_grad():
        logits = model(**inputs).logits
        probs = torch.sigmoid(logits).squeeze(dim=0)
        binary_labels = (probs > torch.tensor(best_thresholds)).int()
        detected_emotions = []
        for label_id, value in enumerate(binary_labels):
            if value == 1:
                detected_emotions.append(ID2LABEL[label_id])
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
    chat_id = update.effective_chat.id
    user = await get_user_sync(chat_id)
    print(f"Detected emotions: {detected_emotions}")
    # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —ç–º–æ—Ü–∏–∏, –±–µ—Ä—ë–º –ø–µ—Ä–≤—É—é
    if detected_emotions:
        first_emotion = detected_emotions[0]
        category = EMOTION_MAP.get(first_emotion, {}).get("category", "unknown")
        emoji = EMOTION_MAP.get(first_emotion, {}).get("emoji", "ü§∑")
    else:
        category = "unknown"
        emoji = "ü§∑"



    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    chat_id = update.effective_chat.id
    user = TelegramUser.objects.get(chat_id=chat_id).user
    MoodEntry.objects.create(user=user, text=text, emotion=first_emotion)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π –æ—Ç–≤–µ—Ç
    final_response = f"–ê–Ω–∞–ª–∏–∑ –ø–æ–∫–∞–∑–∞–ª: {emoji} –í–∞—à–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {category.capitalize()}"
    await update.message.reply_text(final_response)


def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_mood))
    app.run_polling()

if __name__ == '__main__':
    main()

# –ü—Ä–æ–º—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
"""MOOD_PROMPT = "
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π —Ç–µ–∫—Å—Ç –∏ –æ–ø—Ä–µ–¥–µ–ª—è–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (—Ä–∞–¥–æ—Å—Ç—å, –≥—Ä—É—Å—Ç—å, —Å—Ç—Ä–µ—Å—Å, —Ç—Ä–µ–≤–æ–≥–∞ –∏ —Ç.–ø.)
–ü—Ä–µ–¥–ª–∞–≥–∞–π –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ü—Ä–æ–≥—É–ª–∫–∞ –ø–æ–º–æ–≥–∞–µ—Ç —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è").
–ù–µ –¥–∞–≤–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã –∏–ª–∏ –¥–∏–∞–≥–Ω–æ–∑—ã. –û—Ç–≤–µ—á–∞–π –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è! –†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –ø—Ä–æ—à—ë–ª —Ç–≤–æ–π –¥–µ–Ω—å, –∏ —è –ø–æ–ø—Ä–æ–±—É—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def analyze_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_text = update.message.text
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": MOOD_PROMPT},
                {"role": "user", "content": user_text}
            ]
        )
        advice = response.choices[0].message["content"]
        await update.message.reply_text(advice)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –≤–∞—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, analyze_mood))
    app.run_polling() """

"""async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø Telegram-–±–æ—Ç –¥–ª—è –≤–µ–¥–µ–Ω–∏—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!")


if __name__ == '__main__':
    application = ApplicationBuilder().token(TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler('start', start))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
    print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    application.run_polling()"""